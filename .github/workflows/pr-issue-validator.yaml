name: Validate Pull Request

on:
  pull_request:
    types:
      - opened
      - synchronize
      - edited
      - reopened
    branches:    
      - 'main'
      - 'release-**'
      - 'master'
    # paths-ignore:
    #   - 'docs/**'
    #   - '.github/'
    #   - 'CHANGELOG/'
    #   - 'charts/'
    #   - 'manifests/'
    #   - 'sample-docker-templates/'
  
jobs:
  validate-PR-issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
      pull-requests: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Validate Issue Reference
      env:
        GITHUB_TOKEN: ${{ github.token }}
        PR_BODY: ${{ github.event.pull_request.body }}
        url: ${{ github.event.pull_request.url }}
        PRNUM: ${{ github.event.pull_request.number }}
        TITLE: ${{ github.event.pull_request.title }}
      run: |
        set -x
        if [[ "$TITLE" == *"doc:"* || "$TITLE" == *"docs:"* || "$TITLE" == *"chore:"* ]]; then
          echo "Skipping validation as this is a PR for documentation or chore."
          gh pr edit $PRNUM --remove-label "PR:Issue-verification-failed"
          gh pr edit $PRNUM --add-label "PR:Ready-to-Review"
          exit 0
        fi
        
        ### For ex: Fixes #2123
        pattern1="((Fixes|Resolves) #[0-9]+)"
        
        ### For ex: Resolves https://github.com/devtron-labs/devtron/issues/2123
        pattern2="((Fixes|Resolves) https://github.com/rishabhtayal72/hello-world/issues/[0-9]+)"
        
        ### For ex: Fixes devtron-labs/devtron#2123
        pattern3="((Fixes|Resolves) rishabhtayal72/hello-world#[0-9]+)"
        
        # Get the pull request body
        PR_BODY=$(jq -r '.pull_request.body' $GITHUB_EVENT_PATH)
        echo "PR_BODY = $PR_BODY"
        ### Checks if PR_BODY matches pattern1 or pattern2 or pattern3 or none
        ### grep -i (case insensitive) -E (enables extended regular expression in grep) -q (this option suppresses normal output)
        if echo "$PR_BODY" | grep -iEq "$pattern1"; then
            echo "pattern 1 detected !"
            ### Here we are taking only the numerical value ie. issue number
            ### head -n1 only prints the 1st line.
            ### grep -o -E "[0-9]+ basically outputs only the number between [0-9]+
            issue_num=$(echo "$PR_BODY" | grep -iE "$pattern1" | head -n1 | grep -o -E "[0-9]+")
            # echo issue_num=$issue_num
            echo "issue_num is : $issue_num"
        elif echo "$PR_BODY" | grep -iEq "$pattern2"; then
            echo "pattern 2 detected !"
            export issue_num=$(echo "$PR_BODY" | grep -iE "$pattern2" | head -n1 | awk -F '/' '{print $NF}')
            echo $issue_num
            echo "issue_num is : $issue_num"
        elif echo "$PR_BODY" | grep -iEq "$pattern3"; then
            echo "pattern 3 detected !"
            issue_num=$(echo "$PR_BODY" | grep -iE "$pattern3" | head -n1 | awk -F '#' '{print $NF}')
            issue_num=$issue_num
            echo "issue_num is : $issue_num"
        else
            echo "No Issue number detected hence failing the PR Validation check."
            gh pr edit $PRNUM --add-label "PR:Issue-verification-failed"
            gh pr edit $PRNUM --remove-label "PR:Ready-to-Review"
            exit 1
        fi
        ### hardcoding the url here to devtron repo as issues will always be created inside devtron repo.
        url=https://api.github.com/repos/rishabhtayal72/hello-world
        # Add the issue number to the URL
        export url=${url}/issues/${issue_num}
        echo $url
        response_code=$(curl -s -o /dev/null -w "%{http_code}" "https://api.github.com/repos/rishabhtayal72/hello-world/issues/$issue_num")
        # curl -s -o /dev/null -w "%{http_code}" "$url" > response_code
        echo "response code is : $response_code"
        if [[ "$response_code" -eq 200 ]]; then
          # Check if issue is open or closed
          text=$(curl -s "$url")
          echo "checking status of the issue"
          # Skipping this condition as the Issue can be in closed state as BE PRs are merged before FE
          # if [[ $(echo "$text" | jq -r '.state') == "open" ]]; then
            echo "Issue #$issue_num is open"
            echo "Issue reference found in the pull request body."
            gh pr edit $PRNUM --remove-label "PR:Issue-verification-failed"
            gh pr edit $PRNUM --add-label "PR:Ready-to-Review"
            exit 0
          # else
          #   echo "Issue #$issue_num is not open"
          #   exit 1
          # fi
        else
            echo "Invalid Response Code obtained - error code: $response_code"
            echo "No valid issue reference found in the pull request body."
            gh pr comment $PRNUM --body "PR is not linked to any issue, please make the corresponding changes in the body."
            gh pr edit $PRNUM --add-label "PR:Issue-verification-failed"
            gh pr edit $PRNUM --remove-label "PR:Ready-to-Review"
            exit 1
        fi
